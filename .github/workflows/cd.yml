name: CD using Github self-hosted runner

on:
  # actions 탭에서 실행할 수 있도록 한다
  workflow_dispatch:

  push:
    branches:
      - main
      - ci

env:
  ARTIFACT_NAME: kirby-test # 프로젝트 이름과 같이 구별할 수 있는 문자열
  ARTIFACT_DIRECTORY: ./build/libs

# 해당 workflow는 두 개의 job으로 이루어져 있다.
# 하나는 빌드를 통한 jar 생성, 하나는 생성된 jar 배포이다.
# 전자는 GitHub에서 제공하는 runner를, 후자는 self-hosted runner를 사용한다.
jobs:
  # 대부분 앞선 CI와 동일하나, gradle에서 테스트를 하지 않고, jar 파일을 만들어낸다
  build:
    name: Build Jar file and upload artifact
    runs-on: ubuntu-latest

    steps:
      - name: Checkout to current repository
        uses: actions/checkout@v4

      - name: Setup JDK Corretto using cached gradle dependencies
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 17
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 8.8

      - name: Build and test with gradle
        run: ./gradlew clean bootJar

      - name: Rename artifact file
        run: |
          mv ${{ env.ARTIFACT_DIRECTORY }}/*.jar \
          ${{ env.ARTIFACT_DIRECTORY }}/${{ env.ARTIFACT_NAME }}.jar

      - name: Upload created artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_DIRECTORY }}/${{ env.ARTIFACT_NAME }}.jar

  deploy:
    name: Deploy via GitHub hosted runner
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download uploaded artifact
        uses: actions/download-artifact@v4
        # 앞선 actions/upload-artifact에서 업로드한 실행 파일을 다운로드한다
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_DIRECTORY }}

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      # 80 포트에 열려있는 프로세스를 확인하고, 존재한다면 환경변수를 설정한다
      # well-known port (~1024)를 확인하거나 바인딩, 종료할 때에는 권한이 필요하다
      # bash에서 실패하는 경우 전체 job이 실패하므로, || (or) true 연산을 진행한다
      - name: Check if the port 80 is in use
        run: |
          echo "Checking ports on http..."
          PID=$(sudo lsof -t -i :http || true)
          if [ -n "$PID" ]; then
            echo "Found process running on port http: $PID"
            echo "server_running=true" >> "$GITHUB_ENV"
            echo "PID=$PID" >> "$GITHUB_ENV"
          else
            echo "Process not found running on port http!"
            echo "server_running=false" >> "$GITHUB_ENV"
          fi

      # 앞선 step에서 실행되고 있는 프로세스가 발견되는 경우, 이를 종료한다.
      # 단, -15와 같은 graceful 종료를 진행한다.
      # 종료된 것을 확인하기 위해 tail 명령어를 사용한다
      # 프로그램이 종료되는 경우 tail도 종료된다
      - name: Stop server if available (gracefully)
        # 이 step이 실행될 조건을 설정한다
        if: env.server_running == 'true'
        run: |
          echo "Gracefully shutting down process ${{ env.PID }}"
          sudo kill -15 ${{ env.PID }}
          tail --pid=${{ env.PID }} -f /dev/null

      - name: Start server
        run: |
#          sudo nohup java -jar \
#          ${{ env.ARTIFACT_DIRECTORY }}/${{ env.ARTIFACT_NAME }}.jar \
#          --server.port=80 &
          scp -o StrictHostKeyChecking=no ${{ env.ARTIFACT_DIRECTORY }}/${{ env.ARTIFACT_NAME }}.jar ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/path/to/deploy/
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} 'nohup java -jar /path/to/deploy/${{ env.ARTIFACT_NAME }}.jar --server.port=80 &'
